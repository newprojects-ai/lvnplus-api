generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model difficulty_levels {
  difficulty_id Int         @id @default(autoincrement())
  level         Int         @unique(map: "level")
  description   String      @db.VarChar(255)
  created_at    DateTime?   @default(now()) @db.Timestamp(0)
  updated_at    DateTime?   @default(now()) @db.Timestamp(0)
  questions     questions[]
}

model exams {
  exam_id                  String                     @id @db.Char(36)
  name                     String                     @unique(map: "name") @db.VarChar(100)
  description              String?                    @db.Text
  created_at               DateTime?                  @default(now()) @db.Timestamp(0)
  updated_at               DateTime?                  @default(now()) @db.Timestamp(0)
  generated_practice_tests generated_practice_tests[]
  tests                    tests[]
}

model subjects {
  subject_id  String      @id @db.Char(36)
  name        String      @unique(map: "name") @db.VarChar(100)
  description String?     @db.Text
  created_at  DateTime?   @default(now()) @db.Timestamp(0)
  updated_at  DateTime?   @default(now()) @db.Timestamp(0)
  questions   questions[]
  tests       tests[]
  topics      topics[]
}

model topics {
  topic_id                String                    @id @db.Char(36)
  subject_id              String                    @db.Char(36)
  name                    String                    @unique(map: "name") @db.VarChar(100)
  description             String?                   @db.Text
  valid_from              DateTime                  @db.Date
  valid_to                DateTime?                 @db.Date
  created_at              DateTime?                 @default(now()) @db.Timestamp(0)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(0)
  practice_test_subtopics practice_test_subtopics[]
  practice_test_topics    practice_test_topics[]
  questions               questions[]
  subtopics               subtopics[]
  tests                   tests[]
  subjects                subjects                  @relation(fields: [subject_id], references: [subject_id], onUpdate: Restrict, map: "topics_ibfk_1")

  @@index([valid_from, valid_to], map: "idx_validity_topics")
  @@index([subject_id], map: "subject_id")
}

model subtopics {
  subtopic_id             String                    @id @db.Char(36)
  topic_id                String                    @db.Char(36)
  name                    String                    @unique(map: "name") @db.VarChar(100)
  description             String?                   @db.Text
  valid_from              DateTime                  @db.Date
  valid_to                DateTime?                 @db.Date
  created_at              DateTime?                 @default(now()) @db.Timestamp(0)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(0)
  practice_test_subtopics practice_test_subtopics[]
  questions               questions[]
  topics                  topics                    @relation(fields: [topic_id], references: [topic_id], onUpdate: Restrict, map: "subtopics_ibfk_1")
  tests                   tests[]

  @@index([valid_from, valid_to], map: "idx_validity_subtopics")
  @@index([topic_id], map: "topic_id")
}

model questions {
  question_id             String                    @id @db.Char(36)
  test_id                 String?                   @db.Char(36)
  subject_id              String                    @db.Char(36)
  topic_id                String?                   @db.Char(36)
  subtopic_id             String?                   @db.Char(36)
  question_text           String                    @db.Text
  options                 String                    @db.LongText
  correct_answer          String?                   @db.VarChar(255)
  difficulty_id           Int?
  created_at              DateTime?                 @default(now()) @db.Timestamp(0)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(0)
  practice_test_questions practice_test_questions[]
  tests                   tests?                    @relation(fields: [test_id], references: [test_id], onDelete: Restrict, onUpdate: Restrict, map: "questions_ibfk_1")
  subjects                subjects                  @relation(fields: [subject_id], references: [subject_id], onUpdate: Restrict, map: "questions_ibfk_2")
  topics                  topics?                   @relation(fields: [topic_id], references: [topic_id], onDelete: Restrict, onUpdate: Restrict, map: "questions_ibfk_3")
  subtopics               subtopics?                @relation(fields: [subtopic_id], references: [subtopic_id], onDelete: Restrict, onUpdate: Restrict, map: "questions_ibfk_4")
  difficulty_levels       difficulty_levels?        @relation(fields: [difficulty_id], references: [difficulty_id], onDelete: Restrict, onUpdate: Restrict, map: "questions_ibfk_5")

  @@index([difficulty_id], map: "difficulty_id")
  @@index([subject_id], map: "subject_id")
  @@index([subtopic_id], map: "subtopic_id")
  @@index([test_id], map: "test_id")
  @@index([topic_id], map: "topic_id")
}

model tests {
  test_id     String      @id @db.Char(36)
  exam_id     String?     @db.Char(36)
  subject_id  String      @db.Char(36)
  topic_id    String?     @db.Char(36)
  subtopic_id String?     @db.Char(36)
  title       String      @db.VarChar(150)
  description String?     @db.Text
  created_by  String      @db.Char(36)
  created_at  DateTime?   @default(now()) @db.Timestamp(0)
  updated_at  DateTime?   @default(now()) @db.Timestamp(0)
  questions   questions[]
  exams       exams?      @relation(fields: [exam_id], references: [exam_id], onDelete: Restrict, onUpdate: Restrict, map: "tests_ibfk_1")
  subjects    subjects    @relation(fields: [subject_id], references: [subject_id], onUpdate: Restrict, map: "tests_ibfk_2")
  topics      topics?     @relation(fields: [topic_id], references: [topic_id], onDelete: Restrict, onUpdate: Restrict, map: "tests_ibfk_3")
  subtopics   subtopics?  @relation(fields: [subtopic_id], references: [subtopic_id], onDelete: Restrict, onUpdate: Restrict, map: "tests_ibfk_4")
  users       users       @relation(fields: [created_by], references: [user_id], onUpdate: Restrict, map: "tests_ibfk_5")

  @@index([created_by], map: "created_by")
  @@index([exam_id], map: "exam_id")
  @@index([subject_id], map: "subject_id")
  @@index([subtopic_id], map: "subtopic_id")
  @@index([topic_id], map: "topic_id")
}

model users {
  user_id                      String                         @id @default(uuid()) @db.Char(36)
  name                         String                         @db.VarChar(100)
  email                        String                         @unique(map: "email") @db.VarChar(150)
  password                     String                         @db.VarChar(255)
  role                         users_role
  parent_id                    String?                        @db.Char(36)
  created_at                   DateTime?                      @default(now()) @db.Timestamp(0)
  updated_at                   DateTime?                      @default(now()) @db.Timestamp(0)
  generated_practice_tests     generated_practice_tests[]
  practice_test_configurations practice_test_configurations[]
  tests                        tests[]
  users                        users?                         @relation("usersTousers", fields: [parent_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "users_ibfk_1")
  other_users                  users[]                        @relation("usersTousers")

  @@index([role], map: "idx_user_role")
  @@index([parent_id], map: "parent_id")
}

model generated_practice_tests {
  generated_test_id            String                        @id @db.Char(36)
  config_id                    String?                       @db.Char(36)
  user_id                      String                        @db.Char(36)
  exam_id                      String?                       @db.Char(36)
  created_at                   DateTime?                     @default(now()) @db.Timestamp(0)
  practice_test_configurations practice_test_configurations? @relation(fields: [config_id], references: [config_id], onDelete: Restrict, onUpdate: Restrict, map: "generated_practice_tests_ibfk_1")
  users                        users                         @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "generated_practice_tests_ibfk_2")
  exams                        exams?                        @relation(fields: [exam_id], references: [exam_id], onDelete: Restrict, onUpdate: Restrict, map: "generated_practice_tests_ibfk_3")
  practice_test_questions      practice_test_questions[]

  @@index([config_id], map: "config_id")
  @@index([exam_id], map: "exam_id")
  @@index([user_id], map: "user_id")
}

model practice_test_configurations {
  config_id                String                                 @id @db.Char(36)
  user_id                  String                                 @db.Char(36)
  test_type                practice_test_configurations_test_type
  is_timed                 Boolean
  duration_minutes         Int?
  question_count           Int?
  created_at               DateTime?                              @default(now()) @db.Timestamp(0)
  generated_practice_tests generated_practice_tests[]
  users                    users                                  @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "practice_test_configurations_ibfk_1")
  practice_test_subtopics  practice_test_subtopics[]
  practice_test_topics     practice_test_topics[]

  @@index([user_id], map: "idx_test_config_user")
}

model practice_test_questions {
  test_question_id         String                    @id @db.Char(36)
  generated_test_id        String?                   @db.Char(36)
  question_id              String?                   @db.Char(36)
  sequence_number          Int
  generated_practice_tests generated_practice_tests? @relation(fields: [generated_test_id], references: [generated_test_id], onDelete: Restrict, onUpdate: Restrict, map: "practice_test_questions_ibfk_1")
  questions                questions?                @relation(fields: [question_id], references: [question_id], onDelete: Restrict, onUpdate: Restrict, map: "practice_test_questions_ibfk_2")

  @@index([generated_test_id], map: "generated_test_id")
  @@index([question_id], map: "question_id")
}

model practice_test_subtopics {
  config_id                    String                       @db.Char(36)
  topic_id                     String                       @db.Char(36)
  subtopic_id                  String                       @db.Char(36)
  practice_test_configurations practice_test_configurations @relation(fields: [config_id], references: [config_id], onUpdate: Restrict, map: "practice_test_subtopics_ibfk_1")
  topics                       topics                       @relation(fields: [topic_id], references: [topic_id], onUpdate: Restrict, map: "practice_test_subtopics_ibfk_2")
  subtopics                    subtopics                    @relation(fields: [subtopic_id], references: [subtopic_id], onUpdate: Restrict, map: "practice_test_subtopics_ibfk_3")

  @@id([config_id, topic_id, subtopic_id])
  @@index([subtopic_id], map: "subtopic_id")
  @@index([topic_id], map: "topic_id")
}

model practice_test_topics {
  config_id                    String                       @db.Char(36)
  topic_id                     String                       @db.Char(36)
  all_subtopics                Boolean?                     @default(true)
  practice_test_configurations practice_test_configurations @relation(fields: [config_id], references: [config_id], onUpdate: Restrict, map: "practice_test_topics_ibfk_1")
  topics                       topics                       @relation(fields: [topic_id], references: [topic_id], onUpdate: Restrict, map: "practice_test_topics_ibfk_2")

  @@id([config_id, topic_id])
  @@index([topic_id], map: "topic_id")
}

enum practice_test_configurations_test_type {
  Topic_Wise        @map("Topic Wise")
  Mixed
  Mental_Arithmetic @map("Mental Arithmetic")
}

enum users_role {
  Student
  Parent
  Tutor
  Admin
}
